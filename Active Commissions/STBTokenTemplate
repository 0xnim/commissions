// SPDX-License-Identifier: CC-BY-SA 4.0
//https://creativecommons.org/licenses/by-sa/4.0/

// TL;DR: The creator of this contract (@LogETH) is not liable for any damages associated with using the following code
// This contract must be deployed with credits toward the original creator, @LogETH.
// You must indicate if changes were made in a reasonable manner, but not in any way that suggests I endorse you or your use.
// If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.
// You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.
// This TL;DR is solely an explaination and is not a representation of the licence.

// By deploying this contract, you agree to the licence above and the terms and conditions that come with it.

pragma solidity >=0.7.0 <0.9.0;

//// What is this contract? 

//// This contract is an ERC20 token that has a fee module attached to it
//// The admin can change the fee or set it to zero and assign the "immume" role to addresses that makes them immune to the fee.
//// The admin is the person that deploys the contract, it cannot be changed once deployed.

//// Commissioned by spagetti#7777 on 3/19/2022

contract STBTokenTemplate {

    mapping (address => uint256) public balances;
    mapping (address => mapping (address => uint256)) public allowed;

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    string public name;
    uint8 public decimals = 18;
    string public symbol;
    uint public totalSupply;
    address public admin;
    address BaseContract;

    function Initalize(string memory _name, string memory _symbol) public {

        require(msg.sender == BaseContract, "You cannot initalize this stablecoin contract");

        name = _name;
        symbol = _symbol;
    }

    function mint(uint amount, address Who) public {

        require(msg.sender == BaseContract, "You cannot call this function");

        balances[Who] += amount;
        totalSupply += amount;
    }

    function burn(uint amount, address Who) public {

        require(msg.sender == BaseContract, "You cannot call this function");
        require(amount < balances[Who], "You cannot burn more tokens than you have");

        balances[Who] -= amount;
        totalSupply -= amount;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {

        require(balances[msg.sender] >= _value, "You can't send more tokens than you have");

        balances[msg.sender] -= _value;
        balances[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {

        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value, "You can't send more tokens than you have or the approval isn't enough");

        balances[_to] += _value;
        balances[_from] -= _value;
        allowed[_from][msg.sender] -= _value;

        emit Transfer(_from, _to, _value);
        return true;
    }

    function balanceOf(address _owner) public view returns (uint256 balance) {

        return balances[_owner];
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {

        allowed[msg.sender][_spender] = _value;

        emit Approval(msg.sender, _spender, _value); 
        return true;
    }

    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {

        return allowed[_owner][_spender];
    }
}
